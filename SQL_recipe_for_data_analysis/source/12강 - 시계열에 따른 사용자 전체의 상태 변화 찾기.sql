### 등록 수의 추이와 경향 보기
SELECT
	REGISTER_DATE
    , COUNT(DISTINCT USER_ID) AS REGISTER_COUNT
FROM MST_USERS
GROUP BY REGISTER_DATE
ORDER BY REGISTER_DATE;

### 월별 등록 수 추이
WITH
	MST_USERS_WITH_YEAR_MONTH AS (
		SELECT
			*
            , SUBSTR(REGISTER_DATE, 1, 7) AS YEARMONTH
		FROM MST_USERS
	)
SELECT
	YEARMONTH
    , COUNT(DISTINCT USER_ID) AS REGISTER_COUNT
    , LAG(COUNT(DISTINCT USER_ID)) OVER(ORDER BY YEARMONTH) AS LAST_MONTH_COUNT
    , 100
      * COUNT(DISTINCT USER_ID)
      / LAG(COUNT(DISTINCT USER_ID)) OVER(ORDER BY YEARMONTH) AS MONTH_OVER_MONTH_RATIO
FROM MST_USERS_WITH_YEAR_MONTH
GROUP BY YEARMONTH;

### 등록 디바이스별 추이
WITH
	MST_USERS_WITH_YEAR_MONTH AS (
		SELECT
			*
            , SUBSTR(REGISTER_DATE, 1, 7) AS YEARMONTH
		FROM MST_USERS
	)
SELECT
	YEARMONTH
    , COUNT(DISTINCT USER_ID) AS REGISTER_COUNT
    , COUNT(DISTINCT CASE WHEN REGISTER_DEVICE = 'pc' THEN USER_ID END) AS REGISTER_PC
    , COUNT(DISTINCT CASE WHEN REGISTER_DEVICE = 'sp' THEN USER_ID END) AS REGISTER_SP
    , COUNT(DISTINCT CASE WHEN REGISTER_DEVICE = 'app' THEN USER_ID END) AS REGISTER_APP
FROM MST_USERS_WITH_YEAR_MONTH
GROUP BY YEARMONTH
ORDER BY YEARMONTH;

### 날짜별 n일 지속률 추이
WITH
	ACTION_LOG_WITH_MST_USERS AS (
		SELECT
			U.USER_ID
            , SUBSTR(U.REGISTER_DATE, 1, 10) AS REGISTER_DATE
            , SUBSTR(A.STAMP, 1, 10) AS ACTION_DATE
            , MAX(SUBSTR(A.STAMP, 1, 10)) OVER() AS LATEST_DATE
            , DATE_ADD(SUBSTR(U.REGISTER_DATE, 1, 10), INTERVAL 1 DAY) AS NEXT_DAY_1
		FROM MST_USERS AS U
			LEFT OUTER JOIN ACTION_LOG AS A
            ON U.USER_ID = A.USER_ID
	)
SELECT *
FROM ACTION_LOG_WITH_MST_USERS
ORDER BY REGISTER_DATE;

### 사용자의 액션 플래그를 계산하는 쿼리
WITH
	ACTION_LOG_WITH_MST_USERS AS (
		SELECT
			U.USER_ID
            , SUBSTR(U.REGISTER_DATE, 1, 10) AS REGISTER_DATE
            , SUBSTR(A.STAMP, 1, 10) AS ACTION_DATE
            , MAX(SUBSTR(A.STAMP, 1, 10)) OVER() AS LATEST_DATE
            , DATE_ADD(SUBSTR(U.REGISTER_DATE, 1, 10), INTERVAL 1 DAY) AS NEXT_DAY_1
		FROM MST_USERS AS U
			LEFT OUTER JOIN ACTION_LOG AS A
            ON U.USER_ID = A.USER_ID
	)
	, USER_ACTION_FLAG AS (
		SELECT
			USER_ID
            , REGISTER_DATE
            , SIGN(
				SUM(
					CASE WHEN NEXT_DAY_1 <= LATEST_DATE THEN
						CASE WHEN NEXT_DAY_1 = ACTION_DATE THEN 1 ELSE 0 END
					END
				)
			) AS NEXT_1_DAY_ACTION
		FROM ACTION_LOG_WITH_MST_USERS
        GROUP BY USER_ID, REGISTER_DATE
	)
SELECT *
FROM USER_ACTION_FLAG
ORDER BY REGISTER_DATE, USER_ID;

### 다음날 지속률을 계산하는 쿼리
WITH
	ACTION_LOG_WITH_MST_USERS AS (
		SELECT
			U.USER_ID
            , SUBSTR(U.REGISTER_DATE, 1, 10) AS REGISTER_DATE
            , SUBSTR(A.STAMP, 1, 10) AS ACTION_DATE
            , MAX(SUBSTR(A.STAMP, 1, 10)) OVER() AS LATEST_DATE
            , DATE_ADD(SUBSTR(U.REGISTER_DATE, 1, 10), INTERVAL 1 DAY) AS NEXT_DAY_1
		FROM MST_USERS AS U
			LEFT OUTER JOIN ACTION_LOG AS A
            ON U.USER_ID = A.USER_ID
	)
	, USER_ACTION_FLAG AS (
		SELECT
			USER_ID
            , REGISTER_DATE
            , SIGN(
				SUM(
					CASE WHEN NEXT_DAY_1 <= LATEST_DATE THEN
						CASE WHEN NEXT_DAY_1 = ACTION_DATE THEN 1 ELSE 0 END
					END
				)
			) AS NEXT_1_DAY_ACTION
		FROM ACTION_LOG_WITH_MST_USERS
        GROUP BY USER_ID, REGISTER_DATE
	)
SELECT
	REGISTER_DATE
    , AVG(100 * NEXT_1_DAY_ACTION) AS REPEAT_RATE_1_DAY
FROM USER_ACTION_FLAG
GROUP BY REGISTER_DATE
ORDER BY REGISTER_DATE;

### 지속률 지표를 관리하는 마스터 테이블 쿼리를 작성하는 쿼리
WITH
	REPEAT_INTERVAL(INDEX_NAME, INTERVAL_DATE) AS (
					  SELECT '01 DAY REPEAT', 1
            UNION ALL SELECT '02 DAY REPEAT', 2
            UNION ALL SELECT '03 DAY REPEAT', 3
            UNION ALL SELECT '04 DAY REPEAT', 4
            UNION ALL SELECT '05 DAY REPEAT', 5
            UNION ALL SELECT '06 DAY REPEAT', 6
            UNION ALL SELECT '07 DAY REPEAT', 7
	)
SELECT *
FROM REPEAT_INTERVAL
ORDER BY INDEX_NAME;

### 지속률을 세로 기반으로 집계하는 쿼리
WITH
    REPEAT_INTERVAL(INDEX_NAME, INTERVAL_DATE) AS (
					  SELECT '01 DAY REPEAT', 1
            UNION ALL SELECT '02 DAY REPEAT', 2
            UNION ALL SELECT '03 DAY REPEAT', 3
            UNION ALL SELECT '04 DAY REPEAT', 4
            UNION ALL SELECT '05 DAY REPEAT', 5
            UNION ALL SELECT '06 DAY REPEAT', 6
            UNION ALL SELECT '07 DAY REPEAT', 7
	)
	, ACTION_LOG_WITH_INDEX_DATE AS (
		SELECT
			U.USER_ID
            , SUBSTR(U.REGISTER_DATE, 1, 10) AS REGISTER_DATE
            , SUBSTR(A.STAMP, 1, 10) AS ACTION_DATE
            , MAX(SUBSTR(A.STAMP, 1, 10)) AS LATEST_DATE
            , R.INDEX_NAME
            , DATE_ADD(SUBSTR(U.REGISTER_DATE, 1, 10), INTERVAL R.INTERVAL_DATE DAY) AS INDEX_DATE
		FROM MST_USERS AS U
        LEFT OUTER JOIN ACTION_LOG AS A
        ON U.USER_ID = A.USER_ID
        CROSS JOIN REPEAT_INTERVAL AS R
	)
	, USER_ACTION_FLAG AS (
		SELECT
			USER_ID
			, REGISTER_DATE
			, INDEX_NAME
			, SIGN(
				SUM(
					CASE WHEN INDEX_DATE <= LATEST_DATE THEN
						CASE WHEN INDEX_DATE = ACTION_DATE THEN 1 ELSE 0 END
					END
				)
			) AS INDEX_DATE_ACTION
        FROM ACTION_LOG_WITH_INDEX_DATE
        GROUP BY USER_ID, REGISTER_DATE, INDEX_NAME, INDEX_DATE
	)
SELECT
	REGISTER_DATE
    , INDEX_NAME
    , AVG(100 * INDEX_DATE_ACTION) AS REPEAT_RATE
FROM USER_ACTION_FLAG
GROUP BY REGISTER_DATE, INDEX_NAME
ORDER BY REGISTER_DATE, INDEX_NAME;

### 정착률 지표 관리용 마스터 테이블 작성
WITH
    REPEAT_INTERVAL(INDEX_NAME, INTERVAL_BEGIN_DATE, INTERVER_END_DATE) AS (
					  SELECT '07 DAY RETENTION', 1, 7
            UNION ALL SELECT '14 DAY RETENTION', 2, 14
            UNION ALL SELECT '21 DAY RETENTION', 3, 21
            UNION ALL SELECT '28 DAY RETENTION', 4, 28
	)
SELECT *
FROM REPEAT_INTERVAL
ORDER BY INDEX_NAME;

### 정착률 계산하는 쿼리
WITH
    REPEAT_INTERVAL(INDEX_NAME, INTERVAL_BEGIN_DATE, INTERVAL_END_DATE) AS (
					  SELECT '07 DAY RETENTION', 1, 7
            UNION ALL SELECT '14 DAY RETENTION', 2, 14
            UNION ALL SELECT '21 DAY RETENTION', 3, 21
            UNION ALL SELECT '28 DAY RETENTION', 4, 28
	)
	, ACTION_LOG_WITH_INDEX_DATE AS (
		SELECT
			U.USER_ID
			, U.REGISTER_DATE
			, SUBSTR(A.STAMP, 1, 10) AS ACTION_DATE
			, MAX(SUBSTR(A.STAMP, 1, 10)) OVER() AS LATEST_DATE
			, R.INDEX_NAME
			, DATE_ADD(SUBSTR(A.STAMP, 1, 10), INTERVAL R.INTERVAL_BEGIN_DATE DAY) AS INDEX_BEGIN_DATE
			, DATE_ADD(SUBSTR(A.STAMP, 1, 10), INTERVAL R.INTERVAL_END_DATE DAY) AS INDEX_END_DATE
		FROM
			MST_USERS AS U
			LEFT OUTER JOIN
				ACTION_LOG AS A
			ON U.USER_ID = A.USER_ID
			CROSS JOIN REPEAT_INTERVAL AS R
		)
	, USER_ACTION_FLAG AS (
		SELECT
			USER_ID
            , REGISTER_DATE
            , INDEX_NAME
            , SIGN(
				SUM(
					CASE WHEN INDEX_END_DATE <= LATEST_DATE THEN
						CASE WHEN ACTION_DATE BETWEEN INDEX_BEGIN_DATE AND INDEX_END_DATE
							THEN 1 ELSE 0
						END
					END
				)
			) AS INDEX_DATE_ACTION
		FROM ACTION_LOG_WITH_INDEX_DATE
        GROUP BY
			USER_ID, REGISTER_DATE, INDEX_NAME, INDEX_BEGIN_DATE, INDEX_END_DATE
	)
SELECT
	REGISTER_DATE
    , INDEX_NAME
	, AVG(100 * INDEX_DATE_ACTION) AS INDEX_RATE
FROM USER_ACTION_FLAG
GROUP BY REGISTER_DATE, INDEX_NAME
ORDER BY REGISTER_DATE, INDEX_NAME
;

### 지속률 지표를 관리하는 마스터 테이블을 정착률 형식으로 수정한 쿼리
WITH
	REPEAT_INTERVAL(INDEX_NAME, INTERVALBEGIN_DATE, INTERVAL_END_DATE) AS (
				  SELECT '01 DAY REPEAT', 1, 1
		UNION ALL SELECT '02 DAY REPEAT', 2, 2
		UNION ALL SELECT '03 DAY REPEAT', 3, 3
		UNION ALL SELECT '04 DAY REPEAT', 4, 4
        UNION ALL SELECT '05 DAY REPEAT', 5, 5
        UNION ALL SELECT '06 DAY REPEAT', 6, 6
        UNION ALL SELECT '07 DAY REPEAT', 7, 7
        UNION ALL SELECT '07 DAY RETENTION', 1, 7
        UNION ALL SELECT '14 DAY RETENTION', 8, 14
        UNION ALL SELECT '21 DAY RETENTION', 15, 21
        UNION ALL SELECT '28 DAY RETENTION', 22, 28
	)
SELECT *
FROM REPEAT_INTERVAL
ORDER BY INDEX_NAME;

### n일 지속률들을 집계하는 쿼리 (정착률은 제외)
WITH
	REPEAT_INTERVAL(INDEX_NAME, INTERVAL_BEGIN_DATE, INTERVAL_END_DATE) AS (
				  SELECT '01 DAY REPEAT', 1, 1
		UNION ALL SELECT '02 DAY REPEAT', 2, 2
		UNION ALL SELECT '03 DAY REPEAT', 3, 3
		UNION ALL SELECT '04 DAY REPEAT', 4, 4
        UNION ALL SELECT '05 DAY REPEAT', 5, 5
        UNION ALL SELECT '06 DAY REPEAT', 6, 6
        UNION ALL SELECT '07 DAY REPEAT', 7, 7
        UNION ALL SELECT '07 DAY RETENTION', 1, 7
        UNION ALL SELECT '14 DAY RETENTION', 8, 14
        UNION ALL SELECT '21 DAY RETENTION', 15, 21
        UNION ALL SELECT '28 DAY RETENTION', 22, 28
	)
	, ACTION_LOG_WITH_INDEX_DATE AS (
		SELECT
			U.USER_ID
			, U.REGISTER_DATE
			, SUBSTR(A.STAMP, 1, 10) AS ACTION_DATE
			, MAX(SUBSTR(A.STAMP, 1, 10)) OVER() AS LATEST_DATE
			, R.INDEX_NAME
			, DATE_ADD(SUBSTR(A.STAMP, 1, 10), INTERVAL R.INTERVAL_BEGIN_DATE DAY) AS INDEX_BEGIN_DATE
			, DATE_ADD(SUBSTR(A.STAMP, 1, 10), INTERVAL R.INTERVAL_END_DATE DAY) AS INDEX_END_DATE
		FROM
			MST_USERS AS U
			LEFT OUTER JOIN
				ACTION_LOG AS A
			ON U.USER_ID = A.USER_ID
			CROSS JOIN REPEAT_INTERVAL AS R
		)
	, USER_ACTION_FLAG AS (
		SELECT
			USER_ID
            , REGISTER_DATE
            , INDEX_NAME
            , SIGN(
				SUM(
					CASE WHEN INDEX_END_DATE <= LATEST_DATE THEN
						CASE WHEN ACTION_DATE BETWEEN INDEX_BEGIN_DATE AND INDEX_END_DATE
							THEN 1 ELSE 0
						END
					END
				)
			) AS INDEX_DATE_ACTION
		FROM ACTION_LOG_WITH_INDEX_DATE
        GROUP BY
			USER_ID, REGISTER_DATE, INDEX_NAME, INDEX_BEGIN_DATE, INDEX_END_DATE
	)
SELECT
	INDEX_NAME
    , AVG(100 * INDEX_DATE_ACTION) AS REPEAT_RATE
FROM USER_ACTION_FLAG
GROUP BY INDEX_NAME
ORDER BY INDEX_NAME;
