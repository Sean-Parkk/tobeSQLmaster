### 액션과 관련된 지표 집계하기
WITH
	STATS AS (
		SELECT COUNT(DISTINCT SESSION) AS TOTAL_UU
        FROM ACTION_LOG
	)
SELECT
	L.ACTION
    , COUNT(DISTINCT L.SESSION) AS ACTION_UU
    , COUNT(*) AS ACTION_COUNT
    , S.TOTAL_UU
    , 100
      * COUNT(DISTINCT L.SESSION)
      / S.TOTAL_UU 
      AS USAGE_RATE
	, COUNT(*)
      / COUNT(DISTINCT L.SESSION)
      AS COUNT_PER_USER
FROM ACTION_LOG AS L 
CROSS JOIN STATS AS S
GROUP BY L.ACTION, S.TOTAL_UU;

### 로그인 사용자와 비로그인 사용자 구분하여 집계하기
WITH
	ACTION_LOG_WITH_STATUS AS (
		SELECT
			SESSION
            , USER_ID
            , ACTION
            , CASE WHEN COALESCE(USER_ID, '') <> '' THEN 'login' ELSE 'guest' END
              AS LOGIN_STATUS
		FROM ACTION_LOG
)
SELECT * FROM ACTION_LOG_WITH_STATUS;

## 로그인 상태에 따라 액션 수 등을 따로 집계하는 쿼리 (WITH ROLLUP)
WITH
	ACTION_LOG_WITH_STATUS AS (
		SELECT
			SESSION
            , USER_ID
            , ACTION
            , CASE WHEN COALESCE(USER_ID, '') <> '' THEN 'login' ELSE 'guest' END AS LOGIN_STATUS
		FROM ACTION_LOG
	)
SELECT
	COALESCE(ACTION, 'all') AS ACTION
    , COALESCE(LOGIN_STATUS, 'all') AS LOGIN_STATUS
    , COUNT(DISTINCT SESSION) AS ACTION_UU
    , COUNT(*) AS ACTION_COUNT
FROM ACTION_LOG_WITH_STATUS
GROUP BY ACTION, LOGIN_STATUS WITH ROLLUP;

### 회원과 비회원을 구분해서 집계하기
WITH
	ACTION_LOG_WITH_STATUS AS (
		SELECT
			SESSION
            , USER_ID
            , ACTION
            , CASE 
				WHEN COALESCE(MAX(USER_ID)
								OVER(PARTITION BY SESSION ORDER BY STAMP
									ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
							  , '') <> ''
			  THEN 'member'
              ELSE 'none'
            END AS MEMBER_STATUS
            , STAMP
		FROM ACTION_LOG
	)
SELECT * FROM ACTION_LOG_WITH_STATUS;

### 사용자의 생일로 나이를 계산하는 쿼리
WITH
	MST_USERS_WITH_INT_BIRTH_DATE AS (
		SELECT
			*
            , 20200728 AS TODAY
            , REPLACE(BIRTH_DATE, '-', '') AS INT_BIRTH_DATE
		FROM MST_USERS
	)
, MST_USER_WITH_AGE AS (
	SELECT 
    *
	, FLOOR((TODAY - INT_BIRTH_DATE) / 10000) AS AGE
	FROM MST_USERS_WITH_INT_BIRTH_DATE
)
SELECT 
USER_ID
, SEX
, BIRTH_DATE
, AGE FROM MST_USER_WITH_AGE;

### 성별과 연령으로 연령별 구분을 계산하는 쿼리
WITH
	MST_USERS_WITH_INT_BIRTH_DATE AS (
		SELECT
			*
            , 20200728 AS TODAY
            , REPLACE(BIRTH_DATE, '-', '') AS INT_BIRTH_DATE
		FROM MST_USERS
	)
, MST_USER_WITH_AGE AS (
	SELECT 
    *
	, FLOOR((TODAY - INT_BIRTH_DATE) / 10000) AS AGE
	FROM MST_USERS_WITH_INT_BIRTH_DATE
)
, MST_USERS_WITH_CATEGORY AS (
	SELECT 
	USER_ID
	, SEX
	, AGE 
	, CONCAT(
		CASE 
			WHEN AGE >= 20 THEN SEX
			ELSE '' 
		END
		, CASE
			WHEN AGE BETWEEN 4 AND 12 THEN 'C'
			WHEN AGE BETWEEN 13 AND 19 THEN 'T'
			WHEN AGE BETWEEN 20 AND 34 THEN '1'
			WHEN AGE BETWEEN 35 AND 49 THEN '2'
			WHEN AGE >= 50 THEN '3'
		END
		) AS CATEGORY
	FROM MST_USER_WITH_AGE
)
SELECT * FROM MST_USERS_WITH_CATEGORY;

### 연령별 구분의 사람 수를 계산하는 쿼리
WITH
	MST_USERS_WITH_INT_BIRTH_DATE AS (
		SELECT
			*
            , 20200728 AS TODAY
            , REPLACE(BIRTH_DATE, '-', '') AS INT_BIRTH_DATE
		FROM MST_USERS
	)
, MST_USER_WITH_AGE AS (
	SELECT 
    *
	, FLOOR((TODAY - INT_BIRTH_DATE) / 10000) AS AGE
	FROM MST_USERS_WITH_INT_BIRTH_DATE
)
, MST_USERS_WITH_CATEGORY AS (
	SELECT 
	USER_ID
	, SEX
	, AGE 
	, CONCAT(
		CASE 
			WHEN AGE >= 20 THEN SEX
			ELSE '' 
		END
		, CASE
			WHEN AGE BETWEEN 4 AND 12 THEN 'C'
			WHEN AGE BETWEEN 13 AND 19 THEN 'T'
			WHEN AGE BETWEEN 20 AND 34 THEN '1'
			WHEN AGE BETWEEN 35 AND 49 THEN '2'
			WHEN AGE >= 50 THEN '3'
		END
		) AS CATEGORY
	FROM MST_USER_WITH_AGE
)
SELECT 
	CATEGORY
    , COUNT(*) AS USER_COUNT
FROM MST_USERS_WITH_CATEGORY
GROUP BY CATEGORY;

### 연령별 구분의 특징 추출하기
WITH
	MST_USERS_WITH_INT_BIRTH_DATE AS (
		SELECT
			*
            , 20200728 AS TODAY
            , REPLACE(BIRTH_DATE, '-', '') AS INT_BIRTH_DATE
		FROM MST_USERS
	)
, MST_USER_WITH_AGE AS (
	SELECT 
    *
	, FLOOR((TODAY - INT_BIRTH_DATE) / 10000) AS AGE
	FROM MST_USERS_WITH_INT_BIRTH_DATE
)
, MST_USERS_WITH_CATEGORY AS (
	SELECT 
	USER_ID
	, SEX
	, AGE 
	, CONCAT(
		CASE 
			WHEN AGE >= 20 THEN SEX
			ELSE '' 
		END
		, CASE
			WHEN AGE BETWEEN 4 AND 12 THEN 'C'
			WHEN AGE BETWEEN 13 AND 19 THEN 'T'
			WHEN AGE BETWEEN 20 AND 34 THEN '1'
			WHEN AGE BETWEEN 35 AND 49 THEN '2'
			WHEN AGE >= 50 THEN '3'
		END
		) AS CATEGORY
	FROM MST_USER_WITH_AGE
)
SELECT
	A.CATEGORY AS PRODUCT_CATEGORY
    , M.CATEGORY AS USER_CATEGORY
    , COUNT(*) AS PURCHASE_COUNT
FROM ACTION_LOG AS A
JOIN MST_USERS_WITH_CATEGORY AS M
	ON A.USER_ID = M.USER_ID
WHERE A.ACTION = 'purchase'
GROUP BY A.CATEGORY, M.CATEGORY
ORDER BY A.CATEGORY, M.CATEGORY;

SELECT * FROM ACTION_LOG